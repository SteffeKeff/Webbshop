import java.util.HashMap;


public class ShopService implements ProductRepository, AccountRepository, OrderRepository{
	
	private HashMap<String, Customer> accounts = new HashMap<String, Customer>();
	private HashMap<String, Item> products = new HashMap<String, Item>();
	private HashMap<String, Order> orders = new HashMap<String, Order>();
	 
	
	@Override
	public void addCustomer(String username, String password, String email, String firstName, String lastName, String address, String mobileNumber){
		if(!accounts.containsKey(username)){
			accounts.put(username, new Customer(username, password, email, firstName, lastName, address, mobileNumber));
		}
	}

//	@Override
//	public void addAdmin(String username, String password, String email) {
//		if(!accounts.containsKey(username)){
//			accounts.put(username, new Admin(username, password, email));
//		}
//	}

	@Override
	public Customer getAccount(String username) {
		return accounts.getOrDefault(username, null);
	}

//	@Override
//	public void updateAdmin(String username, String password, String email) {
//		accounts.replace(username, new Admin(username,password,email));
//	}
	
	@Override
	public void updateCustomer(String username, String password, String email, String firstName, String lastName, String address, String mobileNumber) {
		accounts.replace(username, new Customer(username, password, email, firstName, lastName, address, mobileNumber));
	}

	@Override
	public void removeAccount(String username) {
		accounts.remove(username);
	}
	
	@Override
	public void addItem(String category, String title, String manufacturer, String model, String description, String img, int price, int quantity){
		if(!products.containsKey(title)){
			products.put(title, new Item(category, title, manufacturer, model, description, img, price, quantity));
		}
	}

	@Override
	public Item getItem(String itemName) {
		return products.getOrDefault(itemName,null);
	}

	@Override
	public HashMap<String,Item> getItems() {
		return products;
	}

	@Override
	public void removeItem(String title) {
		products.remove(title);
	}

	@Override
	public void updateItem(String itemName, Item updateThis) {
		products.replace(itemName, updateThis);
	}

	@Override
	public void addOrder(Customer customer) {
		orders.put(customer.getUsername().concat(new Integer(customer.getOrders().size()).toString()), new Order(customer.getUsername(),customer.getShoppingCart()));
	}

	@Override
	public Order getOrder(String key) {
		return orders.getOrDefault(key, null);
	}

	@Override
	public HashMap<String, Order> getAllOrders() {
		return orders;
	}
	
}